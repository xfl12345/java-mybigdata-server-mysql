import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url 'https://maven.aliyun.com/repository/central'
        }
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            url 'https://maven.aliyun.com/repository/spring'
        }
        maven {
            url 'https://maven.aliyun.com/repository/spring-plugin'
        }
    }
}

plugins {
    id 'maven-publish'
    id 'java-library'
    id 'java'
}

group = 'cc.xfl12345.mybigdata'
version = '0.0.1'
sourceCompatibility = '17'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.encoding = 'UTF-8'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    setProperty("archiveClassifier", "sources")
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
        }
    }
}


repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://maven.aliyun.com/repository/central'
    }
    maven {
        url 'https://maven.aliyun.com/repository/public'
    }
    maven {
        url 'https://maven.aliyun.com/repository/spring'
    }
    maven {
        url 'https://maven.aliyun.com/repository/spring-plugin'
    }
}


dependencies {
    // 补全环境，使得 Intelij IDEA 可以调试 build.gradle
    // https://search.maven.org/artifact/org.apache.groovy/groovy-all/4.0.4/pom
    testRuntimeOnly 'org.apache.groovy:groovy:4.0.4'

    File localDevModeConfFile = new File("localDevMode");
    boolean isLocalDevMode = false;
    if (localDevModeConfFile.exists()) {
        FileReader fileReader = new FileReader(localDevModeConfFile, StandardCharsets.UTF_8);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        try {
            String localDevMode = bufferedReader.readLine();
            isLocalDevMode = "true".equals(localDevMode);
        } catch (Exception ignored) {
        } finally {
            bufferedReader.close();
            fileReader.close();
        }
    }

    if (isLocalDevMode) {
        def depsParentVersion = '0.0.1'
        api platform(group: 'cc.xfl12345.mybigdata', name: 'server-deps-parent', version: depsParentVersion)
        annotationProcessor platform(group: 'cc.xfl12345.mybigdata', name: 'server-deps-parent', version: depsParentVersion)
        testImplementation platform(group: 'cc.xfl12345.mybigdata', name: 'server-deps-parent', version: depsParentVersion)
        testAnnotationProcessor platform(group: 'cc.xfl12345.mybigdata', name: 'server-deps-parent', version: depsParentVersion)

        api group: 'cc.xfl12345.mybigdata', name: 'server-common', version: depsParentVersion
        // api group: 'cc.xfl12345.mybigdata', name: 'server-common', version: depsParentVersion, ext: 'pom'
    } else {
        def depsParentVersion = 'e4af43463a'
        api platform(group: 'com.github.xfl12345', name: 'java-mybigdata-server-deps-parent', version: depsParentVersion)
        annotationProcessor platform(group: 'com.github.xfl12345', name: 'java-mybigdata-server-deps-parent', version: depsParentVersion)
        testAnnotationProcessor platform(group: 'com.github.xfl12345', name: 'java-mybigdata-server-deps-parent', version: depsParentVersion)
        testImplementation platform(group: 'com.github.xfl12345', name: 'java-mybigdata-server-deps-parent', version: depsParentVersion)

        def commonModuleVersion = '5a926d6947'
        // https://jitpack.io/#xfl12345/java-mybigdata-server-common
        api group: 'com.github.xfl12345', name: 'java-mybigdata-server-common', version: commonModuleVersion
        // api group: 'com.github.xfl12345', name: 'java-mybigdata-server-common', version: commonModuleVersion, ext: 'pom'
    }

    // https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api
    api group: 'javax.persistence', name: 'javax.persistence-api'

    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    api group: 'javax.annotation', name: 'javax.annotation-api'

    // JSON support
    // https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2
    api group: 'com.alibaba.fastjson2', name: 'fastjson2'

    def mybatisGeneratorVersion = '1.3.7'
    def tk_mybatis_version = '4.2.1'

    // YAML support
    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    testImplementation group: 'org.yaml', name: 'snakeyaml'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-logging
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-logging'

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    api group: 'mysql', name: 'mysql-connector-java', version: '8.0.30'

    // 阿里巴巴 Druid Datasource
    // https://mvnrepository.com/artifact/com.alibaba/druid
    api group: 'com.alibaba', name: 'druid'

    // 国产ORM框架 bee
    // https://mvnrepository.com/artifact/org.teasoft/bee-spring-boot
    api group: 'org.teasoft', name: 'bee-spring-boot'
    // api group: 'org.teasoft', name: 'bee-spring-boot', ext: 'pom'


    // 注解神器 getter setter toString builder
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    annotationProcessor group: 'org.projectlombok', name: 'lombok'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
    testImplementation group: 'org.projectlombok', name: 'lombok'

    // MyBatis
    // https://mvnrepository.com/artifact/org.mybatis/mybatis
    implementation group: 'org.mybatis', name: 'mybatis', version: '3.5.10'

    // https://mvnrepository.com/artifact/org.mybatis/mybatis-spring
    implementation group: 'org.mybatis', name: 'mybatis-spring', version: '2.0.7'

    // https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core
    implementation group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: mybatisGeneratorVersion

    // https://mvnrepository.com/artifact/org.mybatis.scripting/mybatis-velocity
    testImplementation group: 'org.mybatis.scripting', name: 'mybatis-velocity', version: '2.1.1'


    // MyBatis nuclear bomb
    // https://mvnrepository.com/artifact/tk.mybatis/mapper
    testImplementation group: 'tk.mybatis', name: 'mapper', version: tk_mybatis_version

    // https://mvnrepository.com/artifact/tk.mybatis/mapper-core
    testImplementation group: 'tk.mybatis', name: 'mapper-core', version: tk_mybatis_version

    // https://mvnrepository.com/artifact/tk.mybatis/mapper-base
    testImplementation group: 'tk.mybatis', name: 'mapper-base', version: tk_mybatis_version

    // https://mvnrepository.com/artifact/tk.mybatis/mapper-extra
    testImplementation group: 'tk.mybatis', name: 'mapper-extra', version: tk_mybatis_version

    // https://mvnrepository.com/artifact/tk.mybatis/mapper-weekend
    testImplementation group: 'tk.mybatis', name: 'mapper-weekend', version: tk_mybatis_version

    // https://mvnrepository.com/artifact/tk.mybatis/mapper-generator
    testImplementation group: 'tk.mybatis', name: 'mapper-generator', version: tk_mybatis_version

    // tk.mybatis Dependence
    // https://mvnrepository.com/artifact/org.freemarker/freemarker
    api group: 'org.freemarker', name: 'freemarker'

    // https://mvnrepository.com/artifact/io.swagger/swagger-annotations
    api group: 'io.swagger', name: 'swagger-annotations'

    // other mybatis generator plugins
    // https://mvnrepository.com/artifact/com.itfsw/mybatis-generator-plugin
    testImplementation group: 'com.itfsw', name: 'mybatis-generator-plugin', version: '1.3.10'

    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.12.10'

    // api fileTree(dir:'lib',includes:['**/*.*'])
}

tasks.named('test') {
    useJUnitPlatform()
}
